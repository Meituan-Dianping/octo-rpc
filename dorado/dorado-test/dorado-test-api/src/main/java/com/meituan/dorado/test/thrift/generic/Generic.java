/*
 * Copyright 2018 Meituan Dianping. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.meituan.dorado.test.thrift.generic;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-11-5")
public class Generic {

    public interface Iface {

        public void echo1() throws org.apache.thrift.TException;

        public String echo2(String message) throws org.apache.thrift.TException;

        public SubMessage echo3(SubMessage message) throws org.apache.thrift.TException;

        public List<SubMessage> echo4(List<SubMessage> messages) throws org.apache.thrift.TException;

        public Map<SubMessage,SubMessage> echo5(Map<SubMessage,SubMessage> messages) throws org.apache.thrift.TException;

        public Message echo6(Message message) throws org.apache.thrift.TException;

        public SubMessage echo7(String strMessage, SubMessage message) throws org.apache.thrift.TException;

        public void echo8() throws GenericException, org.apache.thrift.TException;

        public byte echo9(byte param1, int param2, long param3, double param4) throws org.apache.thrift.TException;

        public String echo10(List<Long> param1, List<Short> param2, Set<Byte> param3, Set<MessageType> param4) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void echo1(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo2(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo3(SubMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo4(List<SubMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo5(Map<SubMessage,SubMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo6(Message message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo7(String strMessage, SubMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo8(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo9(byte param1, int param2, long param3, double param4, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void echo10(List<Long> param1, List<Short> param2, Set<Byte> param3, Set<MessageType> param4, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void echo1() throws org.apache.thrift.TException
        {
            send_echo1();
            recv_echo1();
        }

        public void send_echo1() throws org.apache.thrift.TException
        {
            echo1_args args = new echo1_args();
            sendBase("echo1", args);
        }

        public void recv_echo1() throws org.apache.thrift.TException
        {
            echo1_result result = new echo1_result();
            receiveBase(result, "echo1");
            return;
        }

        public String echo2(String message) throws org.apache.thrift.TException
        {
            send_echo2(message);
            return recv_echo2();
        }

        public void send_echo2(String message) throws org.apache.thrift.TException
        {
            echo2_args args = new echo2_args();
            args.setMessage(message);
            sendBase("echo2", args);
        }

        public String recv_echo2() throws org.apache.thrift.TException
        {
            echo2_result result = new echo2_result();
            receiveBase(result, "echo2");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo2 failed: unknown result");
        }

        public SubMessage echo3(SubMessage message) throws org.apache.thrift.TException
        {
            send_echo3(message);
            return recv_echo3();
        }

        public void send_echo3(SubMessage message) throws org.apache.thrift.TException
        {
            echo3_args args = new echo3_args();
            args.setMessage(message);
            sendBase("echo3", args);
        }

        public SubMessage recv_echo3() throws org.apache.thrift.TException
        {
            echo3_result result = new echo3_result();
            receiveBase(result, "echo3");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo3 failed: unknown result");
        }

        public List<SubMessage> echo4(List<SubMessage> messages) throws org.apache.thrift.TException
        {
            send_echo4(messages);
            return recv_echo4();
        }

        public void send_echo4(List<SubMessage> messages) throws org.apache.thrift.TException
        {
            echo4_args args = new echo4_args();
            args.setMessages(messages);
            sendBase("echo4", args);
        }

        public List<SubMessage> recv_echo4() throws org.apache.thrift.TException
        {
            echo4_result result = new echo4_result();
            receiveBase(result, "echo4");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo4 failed: unknown result");
        }

        public Map<SubMessage,SubMessage> echo5(Map<SubMessage,SubMessage> messages) throws org.apache.thrift.TException
        {
            send_echo5(messages);
            return recv_echo5();
        }

        public void send_echo5(Map<SubMessage,SubMessage> messages) throws org.apache.thrift.TException
        {
            echo5_args args = new echo5_args();
            args.setMessages(messages);
            sendBase("echo5", args);
        }

        public Map<SubMessage,SubMessage> recv_echo5() throws org.apache.thrift.TException
        {
            echo5_result result = new echo5_result();
            receiveBase(result, "echo5");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo5 failed: unknown result");
        }

        public Message echo6(Message message) throws org.apache.thrift.TException
        {
            send_echo6(message);
            return recv_echo6();
        }

        public void send_echo6(Message message) throws org.apache.thrift.TException
        {
            echo6_args args = new echo6_args();
            args.setMessage(message);
            sendBase("echo6", args);
        }

        public Message recv_echo6() throws org.apache.thrift.TException
        {
            echo6_result result = new echo6_result();
            receiveBase(result, "echo6");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo6 failed: unknown result");
        }

        public SubMessage echo7(String strMessage, SubMessage message) throws org.apache.thrift.TException
        {
            send_echo7(strMessage, message);
            return recv_echo7();
        }

        public void send_echo7(String strMessage, SubMessage message) throws org.apache.thrift.TException
        {
            echo7_args args = new echo7_args();
            args.setStrMessage(strMessage);
            args.setMessage(message);
            sendBase("echo7", args);
        }

        public SubMessage recv_echo7() throws org.apache.thrift.TException
        {
            echo7_result result = new echo7_result();
            receiveBase(result, "echo7");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo7 failed: unknown result");
        }

        public void echo8() throws GenericException, org.apache.thrift.TException
        {
            send_echo8();
            recv_echo8();
        }

        public void send_echo8() throws org.apache.thrift.TException
        {
            echo8_args args = new echo8_args();
            sendBase("echo8", args);
        }

        public void recv_echo8() throws GenericException, org.apache.thrift.TException
        {
            echo8_result result = new echo8_result();
            receiveBase(result, "echo8");
            if (result.genericException != null) {
                throw result.genericException;
            }
            return;
        }

        public byte echo9(byte param1, int param2, long param3, double param4) throws org.apache.thrift.TException
        {
            send_echo9(param1, param2, param3, param4);
            return recv_echo9();
        }

        public void send_echo9(byte param1, int param2, long param3, double param4) throws org.apache.thrift.TException
        {
            echo9_args args = new echo9_args();
            args.setParam1(param1);
            args.setParam2(param2);
            args.setParam3(param3);
            args.setParam4(param4);
            sendBase("echo9", args);
        }

        public byte recv_echo9() throws org.apache.thrift.TException
        {
            echo9_result result = new echo9_result();
            receiveBase(result, "echo9");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo9 failed: unknown result");
        }

        public String echo10(List<Long> param1, List<Short> param2, Set<Byte> param3, Set<MessageType> param4) throws org.apache.thrift.TException
        {
            send_echo10(param1, param2, param3, param4);
            return recv_echo10();
        }

        public void send_echo10(List<Long> param1, List<Short> param2, Set<Byte> param3, Set<MessageType> param4) throws org.apache.thrift.TException
        {
            echo10_args args = new echo10_args();
            args.setParam1(param1);
            args.setParam2(param2);
            args.setParam3(param3);
            args.setParam4(param4);
            sendBase("echo10", args);
        }

        public String recv_echo10() throws org.apache.thrift.TException
        {
            echo10_result result = new echo10_result();
            receiveBase(result, "echo10");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo10 failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void echo1(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo1_call method_call = new echo1_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo1_call extends org.apache.thrift.async.TAsyncMethodCall {
            public echo1_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo1", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo1_args args = new echo1_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_echo1();
            }
        }

        public void echo2(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo2_call method_call = new echo2_call(message, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo2_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String message;
            public echo2_call(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.message = message;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo2", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo2_args args = new echo2_args();
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_echo2();
            }
        }

        public void echo3(SubMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo3_call method_call = new echo3_call(message, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo3_call extends org.apache.thrift.async.TAsyncMethodCall {
            private SubMessage message;
            public echo3_call(SubMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.message = message;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo3", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo3_args args = new echo3_args();
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public SubMessage getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_echo3();
            }
        }

        public void echo4(List<SubMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo4_call method_call = new echo4_call(messages, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo4_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<SubMessage> messages;
            public echo4_call(List<SubMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.messages = messages;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo4", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo4_args args = new echo4_args();
                args.setMessages(messages);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<SubMessage> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_echo4();
            }
        }

        public void echo5(Map<SubMessage,SubMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo5_call method_call = new echo5_call(messages, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo5_call extends org.apache.thrift.async.TAsyncMethodCall {
            private Map<SubMessage,SubMessage> messages;
            public echo5_call(Map<SubMessage,SubMessage> messages, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.messages = messages;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo5", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo5_args args = new echo5_args();
                args.setMessages(messages);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<SubMessage,SubMessage> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_echo5();
            }
        }

        public void echo6(Message message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo6_call method_call = new echo6_call(message, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo6_call extends org.apache.thrift.async.TAsyncMethodCall {
            private Message message;
            public echo6_call(Message message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.message = message;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo6", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo6_args args = new echo6_args();
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Message getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_echo6();
            }
        }

        public void echo7(String strMessage, SubMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo7_call method_call = new echo7_call(strMessage, message, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo7_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String strMessage;
            private SubMessage message;
            public echo7_call(String strMessage, SubMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.strMessage = strMessage;
                this.message = message;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo7", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo7_args args = new echo7_args();
                args.setStrMessage(strMessage);
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public SubMessage getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_echo7();
            }
        }

        public void echo8(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo8_call method_call = new echo8_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo8_call extends org.apache.thrift.async.TAsyncMethodCall {
            public echo8_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo8", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo8_args args = new echo8_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws GenericException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_echo8();
            }
        }

        public void echo9(byte param1, int param2, long param3, double param4, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo9_call method_call = new echo9_call(param1, param2, param3, param4, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo9_call extends org.apache.thrift.async.TAsyncMethodCall {
            private byte param1;
            private int param2;
            private long param3;
            private double param4;
            public echo9_call(byte param1, int param2, long param3, double param4, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.param1 = param1;
                this.param2 = param2;
                this.param3 = param3;
                this.param4 = param4;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo9", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo9_args args = new echo9_args();
                args.setParam1(param1);
                args.setParam2(param2);
                args.setParam3(param3);
                args.setParam4(param4);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public byte getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_echo9();
            }
        }

        public void echo10(List<Long> param1, List<Short> param2, Set<Byte> param3, Set<MessageType> param4, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            echo10_call method_call = new echo10_call(param1, param2, param3, param4, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class echo10_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<Long> param1;
            private List<Short> param2;
            private Set<Byte> param3;
            private Set<MessageType> param4;
            public echo10_call(List<Long> param1, List<Short> param2, Set<Byte> param3, Set<MessageType> param4, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.param1 = param1;
                this.param2 = param2;
                this.param3 = param3;
                this.param4 = param4;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo10", org.apache.thrift.protocol.TMessageType.CALL, 0));
                echo10_args args = new echo10_args();
                args.setParam1(param1);
                args.setParam2(param2);
                args.setParam3(param3);
                args.setParam4(param4);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_echo10();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("echo1", new echo1());
            processMap.put("echo2", new echo2());
            processMap.put("echo3", new echo3());
            processMap.put("echo4", new echo4());
            processMap.put("echo5", new echo5());
            processMap.put("echo6", new echo6());
            processMap.put("echo7", new echo7());
            processMap.put("echo8", new echo8());
            processMap.put("echo9", new echo9());
            processMap.put("echo10", new echo10());
            return processMap;
        }

        public static class echo1<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo1_args> {
            public echo1() {
                super("echo1");
            }

            public echo1_args getEmptyArgsInstance() {
                return new echo1_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo1_result getResult(I iface, echo1_args args) throws org.apache.thrift.TException {
                echo1_result result = new echo1_result();
                iface.echo1();
                return result;
            }
        }

        public static class echo2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo2_args> {
            public echo2() {
                super("echo2");
            }

            public echo2_args getEmptyArgsInstance() {
                return new echo2_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo2_result getResult(I iface, echo2_args args) throws org.apache.thrift.TException {
                echo2_result result = new echo2_result();
                result.success = iface.echo2(args.message);
                return result;
            }
        }

        public static class echo3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo3_args> {
            public echo3() {
                super("echo3");
            }

            public echo3_args getEmptyArgsInstance() {
                return new echo3_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo3_result getResult(I iface, echo3_args args) throws org.apache.thrift.TException {
                echo3_result result = new echo3_result();
                result.success = iface.echo3(args.message);
                return result;
            }
        }

        public static class echo4<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo4_args> {
            public echo4() {
                super("echo4");
            }

            public echo4_args getEmptyArgsInstance() {
                return new echo4_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo4_result getResult(I iface, echo4_args args) throws org.apache.thrift.TException {
                echo4_result result = new echo4_result();
                result.success = iface.echo4(args.messages);
                return result;
            }
        }

        public static class echo5<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo5_args> {
            public echo5() {
                super("echo5");
            }

            public echo5_args getEmptyArgsInstance() {
                return new echo5_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo5_result getResult(I iface, echo5_args args) throws org.apache.thrift.TException {
                echo5_result result = new echo5_result();
                result.success = iface.echo5(args.messages);
                return result;
            }
        }

        public static class echo6<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo6_args> {
            public echo6() {
                super("echo6");
            }

            public echo6_args getEmptyArgsInstance() {
                return new echo6_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo6_result getResult(I iface, echo6_args args) throws org.apache.thrift.TException {
                echo6_result result = new echo6_result();
                result.success = iface.echo6(args.message);
                return result;
            }
        }

        public static class echo7<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo7_args> {
            public echo7() {
                super("echo7");
            }

            public echo7_args getEmptyArgsInstance() {
                return new echo7_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo7_result getResult(I iface, echo7_args args) throws org.apache.thrift.TException {
                echo7_result result = new echo7_result();
                result.success = iface.echo7(args.strMessage, args.message);
                return result;
            }
        }

        public static class echo8<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo8_args> {
            public echo8() {
                super("echo8");
            }

            public echo8_args getEmptyArgsInstance() {
                return new echo8_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo8_result getResult(I iface, echo8_args args) throws org.apache.thrift.TException {
                echo8_result result = new echo8_result();
                try {
                    iface.echo8();
                } catch (GenericException genericException) {
                    result.genericException = genericException;
                }
                return result;
            }
        }

        public static class echo9<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo9_args> {
            public echo9() {
                super("echo9");
            }

            public echo9_args getEmptyArgsInstance() {
                return new echo9_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo9_result getResult(I iface, echo9_args args) throws org.apache.thrift.TException {
                echo9_result result = new echo9_result();
                result.success = iface.echo9(args.param1, args.param2, args.param3, args.param4);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class echo10<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo10_args> {
            public echo10() {
                super("echo10");
            }

            public echo10_args getEmptyArgsInstance() {
                return new echo10_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public echo10_result getResult(I iface, echo10_args args) throws org.apache.thrift.TException {
                echo10_result result = new echo10_result();
                result.success = iface.echo10(args.param1, args.param2, args.param3, args.param4);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("echo1", new echo1());
            processMap.put("echo2", new echo2());
            processMap.put("echo3", new echo3());
            processMap.put("echo4", new echo4());
            processMap.put("echo5", new echo5());
            processMap.put("echo6", new echo6());
            processMap.put("echo7", new echo7());
            processMap.put("echo8", new echo8());
            processMap.put("echo9", new echo9());
            processMap.put("echo10", new echo10());
            return processMap;
        }

        public static class echo1<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo1_args, Void> {
            public echo1() {
                super("echo1");
            }

            public echo1_args getEmptyArgsInstance() {
                return new echo1_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        echo1_result result = new echo1_result();
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo1_result result = new echo1_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo1_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.echo1(resultHandler);
            }
        }

        public static class echo2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo2_args, String> {
            public echo2() {
                super("echo2");
            }

            public echo2_args getEmptyArgsInstance() {
                return new echo2_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        echo2_result result = new echo2_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo2_result result = new echo2_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo2_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.echo2(args.message,resultHandler);
            }
        }

        public static class echo3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo3_args, SubMessage> {
            public echo3() {
                super("echo3");
            }

            public echo3_args getEmptyArgsInstance() {
                return new echo3_args();
            }

            public AsyncMethodCallback<SubMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<SubMessage>() {
                    public void onComplete(SubMessage o) {
                        echo3_result result = new echo3_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo3_result result = new echo3_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo3_args args, org.apache.thrift.async.AsyncMethodCallback<SubMessage> resultHandler) throws TException {
                iface.echo3(args.message,resultHandler);
            }
        }

        public static class echo4<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo4_args, List<SubMessage>> {
            public echo4() {
                super("echo4");
            }

            public echo4_args getEmptyArgsInstance() {
                return new echo4_args();
            }

            public AsyncMethodCallback<List<SubMessage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<SubMessage>>() {
                    public void onComplete(List<SubMessage> o) {
                        echo4_result result = new echo4_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo4_result result = new echo4_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo4_args args, org.apache.thrift.async.AsyncMethodCallback<List<SubMessage>> resultHandler) throws TException {
                iface.echo4(args.messages,resultHandler);
            }
        }

        public static class echo5<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo5_args, Map<SubMessage,SubMessage>> {
            public echo5() {
                super("echo5");
            }

            public echo5_args getEmptyArgsInstance() {
                return new echo5_args();
            }

            public AsyncMethodCallback<Map<SubMessage,SubMessage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<SubMessage,SubMessage>>() {
                    public void onComplete(Map<SubMessage,SubMessage> o) {
                        echo5_result result = new echo5_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo5_result result = new echo5_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo5_args args, org.apache.thrift.async.AsyncMethodCallback<Map<SubMessage,SubMessage>> resultHandler) throws TException {
                iface.echo5(args.messages,resultHandler);
            }
        }

        public static class echo6<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo6_args, Message> {
            public echo6() {
                super("echo6");
            }

            public echo6_args getEmptyArgsInstance() {
                return new echo6_args();
            }

            public AsyncMethodCallback<Message> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Message>() {
                    public void onComplete(Message o) {
                        echo6_result result = new echo6_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo6_result result = new echo6_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo6_args args, org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler) throws TException {
                iface.echo6(args.message,resultHandler);
            }
        }

        public static class echo7<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo7_args, SubMessage> {
            public echo7() {
                super("echo7");
            }

            public echo7_args getEmptyArgsInstance() {
                return new echo7_args();
            }

            public AsyncMethodCallback<SubMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<SubMessage>() {
                    public void onComplete(SubMessage o) {
                        echo7_result result = new echo7_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo7_result result = new echo7_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo7_args args, org.apache.thrift.async.AsyncMethodCallback<SubMessage> resultHandler) throws TException {
                iface.echo7(args.strMessage, args.message,resultHandler);
            }
        }

        public static class echo8<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo8_args, Void> {
            public echo8() {
                super("echo8");
            }

            public echo8_args getEmptyArgsInstance() {
                return new echo8_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        echo8_result result = new echo8_result();
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo8_result result = new echo8_result();
                        if (e instanceof GenericException) {
                            result.genericException = (GenericException) e;
                            result.setGenericExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo8_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.echo8(resultHandler);
            }
        }

        public static class echo9<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo9_args, Byte> {
            public echo9() {
                super("echo9");
            }

            public echo9_args getEmptyArgsInstance() {
                return new echo9_args();
            }

            public AsyncMethodCallback<Byte> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Byte>() {
                    public void onComplete(Byte o) {
                        echo9_result result = new echo9_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo9_result result = new echo9_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo9_args args, org.apache.thrift.async.AsyncMethodCallback<Byte> resultHandler) throws TException {
                iface.echo9(args.param1, args.param2, args.param3, args.param4,resultHandler);
            }
        }

        public static class echo10<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo10_args, String> {
            public echo10() {
                super("echo10");
            }

            public echo10_args getEmptyArgsInstance() {
                return new echo10_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        echo10_result result = new echo10_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        echo10_result result = new echo10_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, echo10_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.echo10(args.param1, args.param2, args.param3, args.param4,resultHandler);
            }
        }

    }

    public static class echo1_args implements org.apache.thrift.TBase<echo1_args, echo1_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo1_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo1_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo1_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo1_argsTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo1_args.class, metaDataMap);
        }

        public echo1_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo1_args(echo1_args other) {
        }

        public echo1_args deepCopy() {
            return new echo1_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo1_args)
                return this.equals((echo1_args)that);
            return false;
        }

        public boolean equals(echo1_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(echo1_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo1_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo1_argsStandardSchemeFactory implements SchemeFactory {
            public echo1_argsStandardScheme getScheme() {
                return new echo1_argsStandardScheme();
            }
        }

        private static class echo1_argsStandardScheme extends StandardScheme<echo1_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo1_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo1_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo1_argsTupleSchemeFactory implements SchemeFactory {
            public echo1_argsTupleScheme getScheme() {
                return new echo1_argsTupleScheme();
            }
        }

        private static class echo1_argsTupleScheme extends TupleScheme<echo1_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo1_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo1_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class echo1_result implements org.apache.thrift.TBase<echo1_result, echo1_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo1_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo1_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo1_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo1_resultTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo1_result.class, metaDataMap);
        }

        public echo1_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo1_result(echo1_result other) {
        }

        public echo1_result deepCopy() {
            return new echo1_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo1_result)
                return this.equals((echo1_result)that);
            return false;
        }

        public boolean equals(echo1_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(echo1_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo1_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo1_resultStandardSchemeFactory implements SchemeFactory {
            public echo1_resultStandardScheme getScheme() {
                return new echo1_resultStandardScheme();
            }
        }

        private static class echo1_resultStandardScheme extends StandardScheme<echo1_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo1_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo1_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo1_resultTupleSchemeFactory implements SchemeFactory {
            public echo1_resultTupleScheme getScheme() {
                return new echo1_resultTupleScheme();
            }
        }

        private static class echo1_resultTupleScheme extends TupleScheme<echo1_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo1_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo1_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class echo2_args implements org.apache.thrift.TBase<echo2_args, echo2_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo2_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo2_args");

        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo2_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo2_argsTupleSchemeFactory());
        }

        public String message; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MESSAGE((short)1, "message");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo2_args.class, metaDataMap);
        }

        public echo2_args() {
        }

        public echo2_args(
                String message)
        {
            this();
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo2_args(echo2_args other) {
            if (other.isSetMessage()) {
                this.message = other.message;
            }
        }

        public echo2_args deepCopy() {
            return new echo2_args(this);
        }

        @Override
        public void clear() {
            this.message = null;
        }

        public String getMessage() {
            return this.message;
        }

        public echo2_args setMessage(String message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /** Returns true if field message is set (has been assigned a value) and false otherwise */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MESSAGE:
                    return getMessage();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MESSAGE:
                    return isSetMessage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo2_args)
                return this.equals((echo2_args)that);
            return false;
        }

        public boolean equals(echo2_args that) {
            if (that == null)
                return false;

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_message = true && (isSetMessage());
            list.add(present_message);
            if (present_message)
                list.add(message);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo2_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo2_args(");
            boolean first = true;

            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo2_argsStandardSchemeFactory implements SchemeFactory {
            public echo2_argsStandardScheme getScheme() {
                return new echo2_argsStandardScheme();
            }
        }

        private static class echo2_argsStandardScheme extends StandardScheme<echo2_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo2_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.message = iprot.readString();
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo2_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.message);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo2_argsTupleSchemeFactory implements SchemeFactory {
            public echo2_argsTupleScheme getScheme() {
                return new echo2_argsTupleScheme();
            }
        }

        private static class echo2_argsTupleScheme extends TupleScheme<echo2_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo2_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMessage()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetMessage()) {
                    oprot.writeString(struct.message);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo2_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.message = iprot.readString();
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

    public static class echo2_result implements org.apache.thrift.TBase<echo2_result, echo2_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo2_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo2_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo2_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo2_resultTupleSchemeFactory());
        }

        public String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo2_result.class, metaDataMap);
        }

        public echo2_result() {
        }

        public echo2_result(
                String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo2_result(echo2_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public echo2_result deepCopy() {
            return new echo2_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public echo2_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo2_result)
                return this.equals((echo2_result)that);
            return false;
        }

        public boolean equals(echo2_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo2_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo2_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo2_resultStandardSchemeFactory implements SchemeFactory {
            public echo2_resultStandardScheme getScheme() {
                return new echo2_resultStandardScheme();
            }
        }

        private static class echo2_resultStandardScheme extends StandardScheme<echo2_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo2_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo2_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo2_resultTupleSchemeFactory implements SchemeFactory {
            public echo2_resultTupleScheme getScheme() {
                return new echo2_resultTupleScheme();
            }
        }

        private static class echo2_resultTupleScheme extends TupleScheme<echo2_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo2_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo2_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class echo3_args implements org.apache.thrift.TBase<echo3_args, echo3_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo3_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo3_args");

        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo3_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo3_argsTupleSchemeFactory());
        }

        public SubMessage message; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MESSAGE((short)1, "message");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo3_args.class, metaDataMap);
        }

        public echo3_args() {
        }

        public echo3_args(
                SubMessage message)
        {
            this();
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo3_args(echo3_args other) {
            if (other.isSetMessage()) {
                this.message = new SubMessage(other.message);
            }
        }

        public echo3_args deepCopy() {
            return new echo3_args(this);
        }

        @Override
        public void clear() {
            this.message = null;
        }

        public SubMessage getMessage() {
            return this.message;
        }

        public echo3_args setMessage(SubMessage message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /** Returns true if field message is set (has been assigned a value) and false otherwise */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((SubMessage)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MESSAGE:
                    return getMessage();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MESSAGE:
                    return isSetMessage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo3_args)
                return this.equals((echo3_args)that);
            return false;
        }

        public boolean equals(echo3_args that) {
            if (that == null)
                return false;

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_message = true && (isSetMessage());
            list.add(present_message);
            if (present_message)
                list.add(message);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo3_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo3_args(");
            boolean first = true;

            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (message != null) {
                message.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo3_argsStandardSchemeFactory implements SchemeFactory {
            public echo3_argsStandardScheme getScheme() {
                return new echo3_argsStandardScheme();
            }
        }

        private static class echo3_argsStandardScheme extends StandardScheme<echo3_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo3_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.message = new SubMessage();
                                struct.message.read(iprot);
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo3_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    struct.message.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo3_argsTupleSchemeFactory implements SchemeFactory {
            public echo3_argsTupleScheme getScheme() {
                return new echo3_argsTupleScheme();
            }
        }

        private static class echo3_argsTupleScheme extends TupleScheme<echo3_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo3_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMessage()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetMessage()) {
                    struct.message.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo3_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.message = new SubMessage();
                    struct.message.read(iprot);
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

    public static class echo3_result implements org.apache.thrift.TBase<echo3_result, echo3_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo3_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo3_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo3_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo3_resultTupleSchemeFactory());
        }

        public SubMessage success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo3_result.class, metaDataMap);
        }

        public echo3_result() {
        }

        public echo3_result(
                SubMessage success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo3_result(echo3_result other) {
            if (other.isSetSuccess()) {
                this.success = new SubMessage(other.success);
            }
        }

        public echo3_result deepCopy() {
            return new echo3_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public SubMessage getSuccess() {
            return this.success;
        }

        public echo3_result setSuccess(SubMessage success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((SubMessage)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo3_result)
                return this.equals((echo3_result)that);
            return false;
        }

        public boolean equals(echo3_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo3_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo3_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo3_resultStandardSchemeFactory implements SchemeFactory {
            public echo3_resultStandardScheme getScheme() {
                return new echo3_resultStandardScheme();
            }
        }

        private static class echo3_resultStandardScheme extends StandardScheme<echo3_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo3_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new SubMessage();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo3_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo3_resultTupleSchemeFactory implements SchemeFactory {
            public echo3_resultTupleScheme getScheme() {
                return new echo3_resultTupleScheme();
            }
        }

        private static class echo3_resultTupleScheme extends TupleScheme<echo3_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo3_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo3_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new SubMessage();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class echo4_args implements org.apache.thrift.TBase<echo4_args, echo4_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo4_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo4_args");

        private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo4_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo4_argsTupleSchemeFactory());
        }

        public List<SubMessage> messages; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MESSAGES((short)1, "messages");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MESSAGES
                        return MESSAGES;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo4_args.class, metaDataMap);
        }

        public echo4_args() {
        }

        public echo4_args(
                List<SubMessage> messages)
        {
            this();
            this.messages = messages;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo4_args(echo4_args other) {
            if (other.isSetMessages()) {
                List<SubMessage> __this__messages = new ArrayList<SubMessage>(other.messages.size());
                for (SubMessage other_element : other.messages) {
                    __this__messages.add(new SubMessage(other_element));
                }
                this.messages = __this__messages;
            }
        }

        public echo4_args deepCopy() {
            return new echo4_args(this);
        }

        @Override
        public void clear() {
            this.messages = null;
        }

        public int getMessagesSize() {
            return (this.messages == null) ? 0 : this.messages.size();
        }

        public java.util.Iterator<SubMessage> getMessagesIterator() {
            return (this.messages == null) ? null : this.messages.iterator();
        }

        public void addToMessages(SubMessage elem) {
            if (this.messages == null) {
                this.messages = new ArrayList<SubMessage>();
            }
            this.messages.add(elem);
        }

        public List<SubMessage> getMessages() {
            return this.messages;
        }

        public echo4_args setMessages(List<SubMessage> messages) {
            this.messages = messages;
            return this;
        }

        public void unsetMessages() {
            this.messages = null;
        }

        /** Returns true if field messages is set (has been assigned a value) and false otherwise */
        public boolean isSetMessages() {
            return this.messages != null;
        }

        public void setMessagesIsSet(boolean value) {
            if (!value) {
                this.messages = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MESSAGES:
                    if (value == null) {
                        unsetMessages();
                    } else {
                        setMessages((List<SubMessage>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MESSAGES:
                    return getMessages();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MESSAGES:
                    return isSetMessages();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo4_args)
                return this.equals((echo4_args)that);
            return false;
        }

        public boolean equals(echo4_args that) {
            if (that == null)
                return false;

            boolean this_present_messages = true && this.isSetMessages();
            boolean that_present_messages = true && that.isSetMessages();
            if (this_present_messages || that_present_messages) {
                if (!(this_present_messages && that_present_messages))
                    return false;
                if (!this.messages.equals(that.messages))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_messages = true && (isSetMessages());
            list.add(present_messages);
            if (present_messages)
                list.add(messages);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo4_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessages()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo4_args(");
            boolean first = true;

            sb.append("messages:");
            if (this.messages == null) {
                sb.append("null");
            } else {
                sb.append(this.messages);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo4_argsStandardSchemeFactory implements SchemeFactory {
            public echo4_argsStandardScheme getScheme() {
                return new echo4_argsStandardScheme();
            }
        }

        private static class echo4_argsStandardScheme extends StandardScheme<echo4_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo4_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MESSAGES
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.messages = new ArrayList<SubMessage>(_list8.size);
                                    SubMessage _elem9;
                                    for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                                    {
                                        _elem9 = new SubMessage();
                                        _elem9.read(iprot);
                                        struct.messages.add(_elem9);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setMessagesIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo4_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.messages != null) {
                    oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
                        for (SubMessage _iter11 : struct.messages)
                        {
                            _iter11.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo4_argsTupleSchemeFactory implements SchemeFactory {
            public echo4_argsTupleScheme getScheme() {
                return new echo4_argsTupleScheme();
            }
        }

        private static class echo4_argsTupleScheme extends TupleScheme<echo4_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo4_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMessages()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetMessages()) {
                    {
                        oprot.writeI32(struct.messages.size());
                        for (SubMessage _iter12 : struct.messages)
                        {
                            _iter12.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo4_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.messages = new ArrayList<SubMessage>(_list13.size);
                        SubMessage _elem14;
                        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                        {
                            _elem14 = new SubMessage();
                            _elem14.read(iprot);
                            struct.messages.add(_elem14);
                        }
                    }
                    struct.setMessagesIsSet(true);
                }
            }
        }

    }

    public static class echo4_result implements org.apache.thrift.TBase<echo4_result, echo4_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo4_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo4_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo4_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo4_resultTupleSchemeFactory());
        }

        public List<SubMessage> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo4_result.class, metaDataMap);
        }

        public echo4_result() {
        }

        public echo4_result(
                List<SubMessage> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo4_result(echo4_result other) {
            if (other.isSetSuccess()) {
                List<SubMessage> __this__success = new ArrayList<SubMessage>(other.success.size());
                for (SubMessage other_element : other.success) {
                    __this__success.add(new SubMessage(other_element));
                }
                this.success = __this__success;
            }
        }

        public echo4_result deepCopy() {
            return new echo4_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<SubMessage> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(SubMessage elem) {
            if (this.success == null) {
                this.success = new ArrayList<SubMessage>();
            }
            this.success.add(elem);
        }

        public List<SubMessage> getSuccess() {
            return this.success;
        }

        public echo4_result setSuccess(List<SubMessage> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<SubMessage>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo4_result)
                return this.equals((echo4_result)that);
            return false;
        }

        public boolean equals(echo4_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo4_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo4_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo4_resultStandardSchemeFactory implements SchemeFactory {
            public echo4_resultStandardScheme getScheme() {
                return new echo4_resultStandardScheme();
            }
        }

        private static class echo4_resultStandardScheme extends StandardScheme<echo4_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo4_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                                    struct.success = new ArrayList<SubMessage>(_list16.size);
                                    SubMessage _elem17;
                                    for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                                    {
                                        _elem17 = new SubMessage();
                                        _elem17.read(iprot);
                                        struct.success.add(_elem17);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo4_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (SubMessage _iter19 : struct.success)
                        {
                            _iter19.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo4_resultTupleSchemeFactory implements SchemeFactory {
            public echo4_resultTupleScheme getScheme() {
                return new echo4_resultTupleScheme();
            }
        }

        private static class echo4_resultTupleScheme extends TupleScheme<echo4_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo4_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (SubMessage _iter20 : struct.success)
                        {
                            _iter20.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo4_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<SubMessage>(_list21.size);
                        SubMessage _elem22;
                        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                        {
                            _elem22 = new SubMessage();
                            _elem22.read(iprot);
                            struct.success.add(_elem22);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class echo5_args implements org.apache.thrift.TBase<echo5_args, echo5_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo5_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo5_args");

        private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.MAP, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo5_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo5_argsTupleSchemeFactory());
        }

        public Map<SubMessage,SubMessage> messages; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MESSAGES((short)1, "messages");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MESSAGES
                        return MESSAGES;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class),
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo5_args.class, metaDataMap);
        }

        public echo5_args() {
        }

        public echo5_args(
                Map<SubMessage,SubMessage> messages)
        {
            this();
            this.messages = messages;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo5_args(echo5_args other) {
            if (other.isSetMessages()) {
                Map<SubMessage,SubMessage> __this__messages = new HashMap<SubMessage,SubMessage>(other.messages.size());
                for (Map.Entry<SubMessage, SubMessage> other_element : other.messages.entrySet()) {

                    SubMessage other_element_key = other_element.getKey();
                    SubMessage other_element_value = other_element.getValue();

                    SubMessage __this__messages_copy_key = new SubMessage(other_element_key);

                    SubMessage __this__messages_copy_value = new SubMessage(other_element_value);

                    __this__messages.put(__this__messages_copy_key, __this__messages_copy_value);
                }
                this.messages = __this__messages;
            }
        }

        public echo5_args deepCopy() {
            return new echo5_args(this);
        }

        @Override
        public void clear() {
            this.messages = null;
        }

        public int getMessagesSize() {
            return (this.messages == null) ? 0 : this.messages.size();
        }

        public void putToMessages(SubMessage key, SubMessage val) {
            if (this.messages == null) {
                this.messages = new HashMap<SubMessage,SubMessage>();
            }
            this.messages.put(key, val);
        }

        public Map<SubMessage,SubMessage> getMessages() {
            return this.messages;
        }

        public echo5_args setMessages(Map<SubMessage,SubMessage> messages) {
            this.messages = messages;
            return this;
        }

        public void unsetMessages() {
            this.messages = null;
        }

        /** Returns true if field messages is set (has been assigned a value) and false otherwise */
        public boolean isSetMessages() {
            return this.messages != null;
        }

        public void setMessagesIsSet(boolean value) {
            if (!value) {
                this.messages = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MESSAGES:
                    if (value == null) {
                        unsetMessages();
                    } else {
                        setMessages((Map<SubMessage,SubMessage>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MESSAGES:
                    return getMessages();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MESSAGES:
                    return isSetMessages();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo5_args)
                return this.equals((echo5_args)that);
            return false;
        }

        public boolean equals(echo5_args that) {
            if (that == null)
                return false;

            boolean this_present_messages = true && this.isSetMessages();
            boolean that_present_messages = true && that.isSetMessages();
            if (this_present_messages || that_present_messages) {
                if (!(this_present_messages && that_present_messages))
                    return false;
                if (!this.messages.equals(that.messages))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_messages = true && (isSetMessages());
            list.add(present_messages);
            if (present_messages)
                list.add(messages);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo5_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessages()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo5_args(");
            boolean first = true;

            sb.append("messages:");
            if (this.messages == null) {
                sb.append("null");
            } else {
                sb.append(this.messages);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo5_argsStandardSchemeFactory implements SchemeFactory {
            public echo5_argsStandardScheme getScheme() {
                return new echo5_argsStandardScheme();
            }
        }

        private static class echo5_argsStandardScheme extends StandardScheme<echo5_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo5_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MESSAGES
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                                    struct.messages = new HashMap<SubMessage,SubMessage>(2*_map24.size);
                                    SubMessage _key25;
                                    SubMessage _val26;
                                    for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                                    {
                                        _key25 = new SubMessage();
                                        _key25.read(iprot);
                                        _val26 = new SubMessage();
                                        _val26.read(iprot);
                                        struct.messages.put(_key25, _val26);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setMessagesIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo5_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.messages != null) {
                    oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
                        for (Map.Entry<SubMessage, SubMessage> _iter28 : struct.messages.entrySet())
                        {
                            _iter28.getKey().write(oprot);
                            _iter28.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo5_argsTupleSchemeFactory implements SchemeFactory {
            public echo5_argsTupleScheme getScheme() {
                return new echo5_argsTupleScheme();
            }
        }

        private static class echo5_argsTupleScheme extends TupleScheme<echo5_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo5_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMessages()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetMessages()) {
                    {
                        oprot.writeI32(struct.messages.size());
                        for (Map.Entry<SubMessage, SubMessage> _iter29 : struct.messages.entrySet())
                        {
                            _iter29.getKey().write(oprot);
                            _iter29.getValue().write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo5_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.messages = new HashMap<SubMessage,SubMessage>(2*_map30.size);
                        SubMessage _key31;
                        SubMessage _val32;
                        for (int _i33 = 0; _i33 < _map30.size; ++_i33)
                        {
                            _key31 = new SubMessage();
                            _key31.read(iprot);
                            _val32 = new SubMessage();
                            _val32.read(iprot);
                            struct.messages.put(_key31, _val32);
                        }
                    }
                    struct.setMessagesIsSet(true);
                }
            }
        }

    }

    public static class echo5_result implements org.apache.thrift.TBase<echo5_result, echo5_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo5_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo5_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo5_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo5_resultTupleSchemeFactory());
        }

        public Map<SubMessage,SubMessage> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class),
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo5_result.class, metaDataMap);
        }

        public echo5_result() {
        }

        public echo5_result(
                Map<SubMessage,SubMessage> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo5_result(echo5_result other) {
            if (other.isSetSuccess()) {
                Map<SubMessage,SubMessage> __this__success = new HashMap<SubMessage,SubMessage>(other.success.size());
                for (Map.Entry<SubMessage, SubMessage> other_element : other.success.entrySet()) {

                    SubMessage other_element_key = other_element.getKey();
                    SubMessage other_element_value = other_element.getValue();

                    SubMessage __this__success_copy_key = new SubMessage(other_element_key);

                    SubMessage __this__success_copy_value = new SubMessage(other_element_value);

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public echo5_result deepCopy() {
            return new echo5_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(SubMessage key, SubMessage val) {
            if (this.success == null) {
                this.success = new HashMap<SubMessage,SubMessage>();
            }
            this.success.put(key, val);
        }

        public Map<SubMessage,SubMessage> getSuccess() {
            return this.success;
        }

        public echo5_result setSuccess(Map<SubMessage,SubMessage> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<SubMessage,SubMessage>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo5_result)
                return this.equals((echo5_result)that);
            return false;
        }

        public boolean equals(echo5_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo5_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo5_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo5_resultStandardSchemeFactory implements SchemeFactory {
            public echo5_resultStandardScheme getScheme() {
                return new echo5_resultStandardScheme();
            }
        }

        private static class echo5_resultStandardScheme extends StandardScheme<echo5_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo5_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                                    struct.success = new HashMap<SubMessage,SubMessage>(2*_map34.size);
                                    SubMessage _key35;
                                    SubMessage _val36;
                                    for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                                    {
                                        _key35 = new SubMessage();
                                        _key35.read(iprot);
                                        _val36 = new SubMessage();
                                        _val36.read(iprot);
                                        struct.success.put(_key35, _val36);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo5_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (Map.Entry<SubMessage, SubMessage> _iter38 : struct.success.entrySet())
                        {
                            _iter38.getKey().write(oprot);
                            _iter38.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo5_resultTupleSchemeFactory implements SchemeFactory {
            public echo5_resultTupleScheme getScheme() {
                return new echo5_resultTupleScheme();
            }
        }

        private static class echo5_resultTupleScheme extends TupleScheme<echo5_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo5_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<SubMessage, SubMessage> _iter39 : struct.success.entrySet())
                        {
                            _iter39.getKey().write(oprot);
                            _iter39.getValue().write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo5_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new HashMap<SubMessage,SubMessage>(2*_map40.size);
                        SubMessage _key41;
                        SubMessage _val42;
                        for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                        {
                            _key41 = new SubMessage();
                            _key41.read(iprot);
                            _val42 = new SubMessage();
                            _val42.read(iprot);
                            struct.success.put(_key41, _val42);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class echo6_args implements org.apache.thrift.TBase<echo6_args, echo6_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo6_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo6_args");

        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo6_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo6_argsTupleSchemeFactory());
        }

        public Message message; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MESSAGE((short)1, "message");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo6_args.class, metaDataMap);
        }

        public echo6_args() {
        }

        public echo6_args(
                Message message)
        {
            this();
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo6_args(echo6_args other) {
            if (other.isSetMessage()) {
                this.message = new Message(other.message);
            }
        }

        public echo6_args deepCopy() {
            return new echo6_args(this);
        }

        @Override
        public void clear() {
            this.message = null;
        }

        public Message getMessage() {
            return this.message;
        }

        public echo6_args setMessage(Message message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /** Returns true if field message is set (has been assigned a value) and false otherwise */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((Message)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MESSAGE:
                    return getMessage();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MESSAGE:
                    return isSetMessage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo6_args)
                return this.equals((echo6_args)that);
            return false;
        }

        public boolean equals(echo6_args that) {
            if (that == null)
                return false;

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_message = true && (isSetMessage());
            list.add(present_message);
            if (present_message)
                list.add(message);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo6_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo6_args(");
            boolean first = true;

            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (message != null) {
                message.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo6_argsStandardSchemeFactory implements SchemeFactory {
            public echo6_argsStandardScheme getScheme() {
                return new echo6_argsStandardScheme();
            }
        }

        private static class echo6_argsStandardScheme extends StandardScheme<echo6_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo6_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.message = new Message();
                                struct.message.read(iprot);
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo6_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    struct.message.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo6_argsTupleSchemeFactory implements SchemeFactory {
            public echo6_argsTupleScheme getScheme() {
                return new echo6_argsTupleScheme();
            }
        }

        private static class echo6_argsTupleScheme extends TupleScheme<echo6_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo6_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMessage()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetMessage()) {
                    struct.message.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo6_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.message = new Message();
                    struct.message.read(iprot);
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

    public static class echo6_result implements org.apache.thrift.TBase<echo6_result, echo6_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo6_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo6_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo6_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo6_resultTupleSchemeFactory());
        }

        public Message success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo6_result.class, metaDataMap);
        }

        public echo6_result() {
        }

        public echo6_result(
                Message success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo6_result(echo6_result other) {
            if (other.isSetSuccess()) {
                this.success = new Message(other.success);
            }
        }

        public echo6_result deepCopy() {
            return new echo6_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public Message getSuccess() {
            return this.success;
        }

        public echo6_result setSuccess(Message success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Message)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo6_result)
                return this.equals((echo6_result)that);
            return false;
        }

        public boolean equals(echo6_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo6_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo6_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo6_resultStandardSchemeFactory implements SchemeFactory {
            public echo6_resultStandardScheme getScheme() {
                return new echo6_resultStandardScheme();
            }
        }

        private static class echo6_resultStandardScheme extends StandardScheme<echo6_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo6_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new Message();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo6_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo6_resultTupleSchemeFactory implements SchemeFactory {
            public echo6_resultTupleScheme getScheme() {
                return new echo6_resultTupleScheme();
            }
        }

        private static class echo6_resultTupleScheme extends TupleScheme<echo6_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo6_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo6_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new Message();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class echo7_args implements org.apache.thrift.TBase<echo7_args, echo7_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo7_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo7_args");

        private static final org.apache.thrift.protocol.TField STR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("strMessage", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo7_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo7_argsTupleSchemeFactory());
        }

        public String strMessage; // required
        public SubMessage message; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            STR_MESSAGE((short)1, "strMessage"),
            MESSAGE((short)2, "message");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // STR_MESSAGE
                        return STR_MESSAGE;
                    case 2: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.STR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("strMessage", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo7_args.class, metaDataMap);
        }

        public echo7_args() {
        }

        public echo7_args(
                String strMessage,
                SubMessage message)
        {
            this();
            this.strMessage = strMessage;
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo7_args(echo7_args other) {
            if (other.isSetStrMessage()) {
                this.strMessage = other.strMessage;
            }
            if (other.isSetMessage()) {
                this.message = new SubMessage(other.message);
            }
        }

        public echo7_args deepCopy() {
            return new echo7_args(this);
        }

        @Override
        public void clear() {
            this.strMessage = null;
            this.message = null;
        }

        public String getStrMessage() {
            return this.strMessage;
        }

        public echo7_args setStrMessage(String strMessage) {
            this.strMessage = strMessage;
            return this;
        }

        public void unsetStrMessage() {
            this.strMessage = null;
        }

        /** Returns true if field strMessage is set (has been assigned a value) and false otherwise */
        public boolean isSetStrMessage() {
            return this.strMessage != null;
        }

        public void setStrMessageIsSet(boolean value) {
            if (!value) {
                this.strMessage = null;
            }
        }

        public SubMessage getMessage() {
            return this.message;
        }

        public echo7_args setMessage(SubMessage message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /** Returns true if field message is set (has been assigned a value) and false otherwise */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case STR_MESSAGE:
                    if (value == null) {
                        unsetStrMessage();
                    } else {
                        setStrMessage((String)value);
                    }
                    break;

                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((SubMessage)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case STR_MESSAGE:
                    return getStrMessage();

                case MESSAGE:
                    return getMessage();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case STR_MESSAGE:
                    return isSetStrMessage();
                case MESSAGE:
                    return isSetMessage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo7_args)
                return this.equals((echo7_args)that);
            return false;
        }

        public boolean equals(echo7_args that) {
            if (that == null)
                return false;

            boolean this_present_strMessage = true && this.isSetStrMessage();
            boolean that_present_strMessage = true && that.isSetStrMessage();
            if (this_present_strMessage || that_present_strMessage) {
                if (!(this_present_strMessage && that_present_strMessage))
                    return false;
                if (!this.strMessage.equals(that.strMessage))
                    return false;
            }

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_strMessage = true && (isSetStrMessage());
            list.add(present_strMessage);
            if (present_strMessage)
                list.add(strMessage);

            boolean present_message = true && (isSetMessage());
            list.add(present_message);
            if (present_message)
                list.add(message);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo7_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetStrMessage()).compareTo(other.isSetStrMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStrMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strMessage, other.strMessage);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo7_args(");
            boolean first = true;

            sb.append("strMessage:");
            if (this.strMessage == null) {
                sb.append("null");
            } else {
                sb.append(this.strMessage);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (message != null) {
                message.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo7_argsStandardSchemeFactory implements SchemeFactory {
            public echo7_argsStandardScheme getScheme() {
                return new echo7_argsStandardScheme();
            }
        }

        private static class echo7_argsStandardScheme extends StandardScheme<echo7_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo7_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // STR_MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.strMessage = iprot.readString();
                                struct.setStrMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.message = new SubMessage();
                                struct.message.read(iprot);
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo7_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.strMessage != null) {
                    oprot.writeFieldBegin(STR_MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.strMessage);
                    oprot.writeFieldEnd();
                }
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    struct.message.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo7_argsTupleSchemeFactory implements SchemeFactory {
            public echo7_argsTupleScheme getScheme() {
                return new echo7_argsTupleScheme();
            }
        }

        private static class echo7_argsTupleScheme extends TupleScheme<echo7_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo7_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetStrMessage()) {
                    optionals.set(0);
                }
                if (struct.isSetMessage()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetStrMessage()) {
                    oprot.writeString(struct.strMessage);
                }
                if (struct.isSetMessage()) {
                    struct.message.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo7_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.strMessage = iprot.readString();
                    struct.setStrMessageIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.message = new SubMessage();
                    struct.message.read(iprot);
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

    public static class echo7_result implements org.apache.thrift.TBase<echo7_result, echo7_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo7_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo7_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo7_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo7_resultTupleSchemeFactory());
        }

        public SubMessage success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubMessage.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo7_result.class, metaDataMap);
        }

        public echo7_result() {
        }

        public echo7_result(
                SubMessage success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo7_result(echo7_result other) {
            if (other.isSetSuccess()) {
                this.success = new SubMessage(other.success);
            }
        }

        public echo7_result deepCopy() {
            return new echo7_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public SubMessage getSuccess() {
            return this.success;
        }

        public echo7_result setSuccess(SubMessage success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((SubMessage)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo7_result)
                return this.equals((echo7_result)that);
            return false;
        }

        public boolean equals(echo7_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo7_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo7_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo7_resultStandardSchemeFactory implements SchemeFactory {
            public echo7_resultStandardScheme getScheme() {
                return new echo7_resultStandardScheme();
            }
        }

        private static class echo7_resultStandardScheme extends StandardScheme<echo7_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo7_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new SubMessage();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo7_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo7_resultTupleSchemeFactory implements SchemeFactory {
            public echo7_resultTupleScheme getScheme() {
                return new echo7_resultTupleScheme();
            }
        }

        private static class echo7_resultTupleScheme extends TupleScheme<echo7_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo7_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo7_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new SubMessage();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class echo8_args implements org.apache.thrift.TBase<echo8_args, echo8_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo8_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo8_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo8_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo8_argsTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo8_args.class, metaDataMap);
        }

        public echo8_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo8_args(echo8_args other) {
        }

        public echo8_args deepCopy() {
            return new echo8_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo8_args)
                return this.equals((echo8_args)that);
            return false;
        }

        public boolean equals(echo8_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(echo8_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo8_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo8_argsStandardSchemeFactory implements SchemeFactory {
            public echo8_argsStandardScheme getScheme() {
                return new echo8_argsStandardScheme();
            }
        }

        private static class echo8_argsStandardScheme extends StandardScheme<echo8_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo8_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo8_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo8_argsTupleSchemeFactory implements SchemeFactory {
            public echo8_argsTupleScheme getScheme() {
                return new echo8_argsTupleScheme();
            }
        }

        private static class echo8_argsTupleScheme extends TupleScheme<echo8_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo8_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo8_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class echo8_result implements org.apache.thrift.TBase<echo8_result, echo8_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo8_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo8_result");

        private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("genericException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo8_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo8_resultTupleSchemeFactory());
        }

        public GenericException genericException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            GENERIC_EXCEPTION((short)1, "genericException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // GENERIC_EXCEPTION
                        return GENERIC_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("genericException", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo8_result.class, metaDataMap);
        }

        public echo8_result() {
        }

        public echo8_result(
                GenericException genericException)
        {
            this();
            this.genericException = genericException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo8_result(echo8_result other) {
            if (other.isSetGenericException()) {
                this.genericException = new GenericException(other.genericException);
            }
        }

        public echo8_result deepCopy() {
            return new echo8_result(this);
        }

        @Override
        public void clear() {
            this.genericException = null;
        }

        public GenericException getGenericException() {
            return this.genericException;
        }

        public echo8_result setGenericException(GenericException genericException) {
            this.genericException = genericException;
            return this;
        }

        public void unsetGenericException() {
            this.genericException = null;
        }

        /** Returns true if field genericException is set (has been assigned a value) and false otherwise */
        public boolean isSetGenericException() {
            return this.genericException != null;
        }

        public void setGenericExceptionIsSet(boolean value) {
            if (!value) {
                this.genericException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case GENERIC_EXCEPTION:
                    if (value == null) {
                        unsetGenericException();
                    } else {
                        setGenericException((GenericException)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case GENERIC_EXCEPTION:
                    return getGenericException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case GENERIC_EXCEPTION:
                    return isSetGenericException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo8_result)
                return this.equals((echo8_result)that);
            return false;
        }

        public boolean equals(echo8_result that) {
            if (that == null)
                return false;

            boolean this_present_genericException = true && this.isSetGenericException();
            boolean that_present_genericException = true && that.isSetGenericException();
            if (this_present_genericException || that_present_genericException) {
                if (!(this_present_genericException && that_present_genericException))
                    return false;
                if (!this.genericException.equals(that.genericException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_genericException = true && (isSetGenericException());
            list.add(present_genericException);
            if (present_genericException)
                list.add(genericException);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo8_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetGenericException()).compareTo(other.isSetGenericException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetGenericException()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genericException, other.genericException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo8_result(");
            boolean first = true;

            sb.append("genericException:");
            if (this.genericException == null) {
                sb.append("null");
            } else {
                sb.append(this.genericException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo8_resultStandardSchemeFactory implements SchemeFactory {
            public echo8_resultStandardScheme getScheme() {
                return new echo8_resultStandardScheme();
            }
        }

        private static class echo8_resultStandardScheme extends StandardScheme<echo8_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo8_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // GENERIC_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.genericException = new GenericException();
                                struct.genericException.read(iprot);
                                struct.setGenericExceptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo8_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.genericException != null) {
                    oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
                    struct.genericException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo8_resultTupleSchemeFactory implements SchemeFactory {
            public echo8_resultTupleScheme getScheme() {
                return new echo8_resultTupleScheme();
            }
        }

        private static class echo8_resultTupleScheme extends TupleScheme<echo8_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo8_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetGenericException()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetGenericException()) {
                    struct.genericException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo8_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.genericException = new GenericException();
                    struct.genericException.read(iprot);
                    struct.setGenericExceptionIsSet(true);
                }
            }
        }

    }

    public static class echo9_args implements org.apache.thrift.TBase<echo9_args, echo9_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo9_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo9_args");

        private static final org.apache.thrift.protocol.TField PARAM1_FIELD_DESC = new org.apache.thrift.protocol.TField("param1", org.apache.thrift.protocol.TType.BYTE, (short)1);
        private static final org.apache.thrift.protocol.TField PARAM2_FIELD_DESC = new org.apache.thrift.protocol.TField("param2", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PARAM3_FIELD_DESC = new org.apache.thrift.protocol.TField("param3", org.apache.thrift.protocol.TType.I64, (short)3);
        private static final org.apache.thrift.protocol.TField PARAM4_FIELD_DESC = new org.apache.thrift.protocol.TField("param4", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo9_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo9_argsTupleSchemeFactory());
        }

        public byte param1; // required
        public int param2; // required
        public long param3; // required
        public double param4; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAM1((short)1, "param1"),
            PARAM2((short)2, "param2"),
            PARAM3((short)3, "param3"),
            PARAM4((short)4, "param4");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAM1
                        return PARAM1;
                    case 2: // PARAM2
                        return PARAM2;
                    case 3: // PARAM3
                        return PARAM3;
                    case 4: // PARAM4
                        return PARAM4;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PARAM1_ISSET_ID = 0;
        private static final int __PARAM2_ISSET_ID = 1;
        private static final int __PARAM3_ISSET_ID = 2;
        private static final int __PARAM4_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAM1, new org.apache.thrift.meta_data.FieldMetaData("param1", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
            tmpMap.put(_Fields.PARAM2, new org.apache.thrift.meta_data.FieldMetaData("param2", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PARAM3, new org.apache.thrift.meta_data.FieldMetaData("param3", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.PARAM4, new org.apache.thrift.meta_data.FieldMetaData("param4", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo9_args.class, metaDataMap);
        }

        public echo9_args() {
        }

        public echo9_args(
                byte param1,
                int param2,
                long param3,
                double param4)
        {
            this();
            this.param1 = param1;
            setParam1IsSet(true);
            this.param2 = param2;
            setParam2IsSet(true);
            this.param3 = param3;
            setParam3IsSet(true);
            this.param4 = param4;
            setParam4IsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo9_args(echo9_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.param1 = other.param1;
            this.param2 = other.param2;
            this.param3 = other.param3;
            this.param4 = other.param4;
        }

        public echo9_args deepCopy() {
            return new echo9_args(this);
        }

        @Override
        public void clear() {
            setParam1IsSet(false);
            this.param1 = 0;
            setParam2IsSet(false);
            this.param2 = 0;
            setParam3IsSet(false);
            this.param3 = 0;
            setParam4IsSet(false);
            this.param4 = 0.0;
        }

        public byte getParam1() {
            return this.param1;
        }

        public echo9_args setParam1(byte param1) {
            this.param1 = param1;
            setParam1IsSet(true);
            return this;
        }

        public void unsetParam1() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAM1_ISSET_ID);
        }

        /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
        public boolean isSetParam1() {
            return EncodingUtils.testBit(__isset_bitfield, __PARAM1_ISSET_ID);
        }

        public void setParam1IsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAM1_ISSET_ID, value);
        }

        public int getParam2() {
            return this.param2;
        }

        public echo9_args setParam2(int param2) {
            this.param2 = param2;
            setParam2IsSet(true);
            return this;
        }

        public void unsetParam2() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAM2_ISSET_ID);
        }

        /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
        public boolean isSetParam2() {
            return EncodingUtils.testBit(__isset_bitfield, __PARAM2_ISSET_ID);
        }

        public void setParam2IsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAM2_ISSET_ID, value);
        }

        public long getParam3() {
            return this.param3;
        }

        public echo9_args setParam3(long param3) {
            this.param3 = param3;
            setParam3IsSet(true);
            return this;
        }

        public void unsetParam3() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAM3_ISSET_ID);
        }

        /** Returns true if field param3 is set (has been assigned a value) and false otherwise */
        public boolean isSetParam3() {
            return EncodingUtils.testBit(__isset_bitfield, __PARAM3_ISSET_ID);
        }

        public void setParam3IsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAM3_ISSET_ID, value);
        }

        public double getParam4() {
            return this.param4;
        }

        public echo9_args setParam4(double param4) {
            this.param4 = param4;
            setParam4IsSet(true);
            return this;
        }

        public void unsetParam4() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAM4_ISSET_ID);
        }

        /** Returns true if field param4 is set (has been assigned a value) and false otherwise */
        public boolean isSetParam4() {
            return EncodingUtils.testBit(__isset_bitfield, __PARAM4_ISSET_ID);
        }

        public void setParam4IsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAM4_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PARAM1:
                    if (value == null) {
                        unsetParam1();
                    } else {
                        setParam1((Byte)value);
                    }
                    break;

                case PARAM2:
                    if (value == null) {
                        unsetParam2();
                    } else {
                        setParam2((Integer)value);
                    }
                    break;

                case PARAM3:
                    if (value == null) {
                        unsetParam3();
                    } else {
                        setParam3((Long)value);
                    }
                    break;

                case PARAM4:
                    if (value == null) {
                        unsetParam4();
                    } else {
                        setParam4((Double)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAM1:
                    return Byte.valueOf(getParam1());

                case PARAM2:
                    return Integer.valueOf(getParam2());

                case PARAM3:
                    return Long.valueOf(getParam3());

                case PARAM4:
                    return Double.valueOf(getParam4());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PARAM1:
                    return isSetParam1();
                case PARAM2:
                    return isSetParam2();
                case PARAM3:
                    return isSetParam3();
                case PARAM4:
                    return isSetParam4();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo9_args)
                return this.equals((echo9_args)that);
            return false;
        }

        public boolean equals(echo9_args that) {
            if (that == null)
                return false;

            boolean this_present_param1 = true;
            boolean that_present_param1 = true;
            if (this_present_param1 || that_present_param1) {
                if (!(this_present_param1 && that_present_param1))
                    return false;
                if (this.param1 != that.param1)
                    return false;
            }

            boolean this_present_param2 = true;
            boolean that_present_param2 = true;
            if (this_present_param2 || that_present_param2) {
                if (!(this_present_param2 && that_present_param2))
                    return false;
                if (this.param2 != that.param2)
                    return false;
            }

            boolean this_present_param3 = true;
            boolean that_present_param3 = true;
            if (this_present_param3 || that_present_param3) {
                if (!(this_present_param3 && that_present_param3))
                    return false;
                if (this.param3 != that.param3)
                    return false;
            }

            boolean this_present_param4 = true;
            boolean that_present_param4 = true;
            if (this_present_param4 || that_present_param4) {
                if (!(this_present_param4 && that_present_param4))
                    return false;
                if (this.param4 != that.param4)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_param1 = true;
            list.add(present_param1);
            if (present_param1)
                list.add(param1);

            boolean present_param2 = true;
            list.add(present_param2);
            if (present_param2)
                list.add(param2);

            boolean present_param3 = true;
            list.add(present_param3);
            if (present_param3)
                list.add(param3);

            boolean present_param4 = true;
            list.add(present_param4);
            if (present_param4)
                list.add(param4);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo9_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetParam1()).compareTo(other.isSetParam1());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam1()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param1, other.param1);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetParam2()).compareTo(other.isSetParam2());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam2()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param2, other.param2);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetParam3()).compareTo(other.isSetParam3());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam3()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param3, other.param3);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetParam4()).compareTo(other.isSetParam4());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam4()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param4, other.param4);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo9_args(");
            boolean first = true;

            sb.append("param1:");
            sb.append(this.param1);
            first = false;
            if (!first) sb.append(", ");
            sb.append("param2:");
            sb.append(this.param2);
            first = false;
            if (!first) sb.append(", ");
            sb.append("param3:");
            sb.append(this.param3);
            first = false;
            if (!first) sb.append(", ");
            sb.append("param4:");
            sb.append(this.param4);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo9_argsStandardSchemeFactory implements SchemeFactory {
            public echo9_argsStandardScheme getScheme() {
                return new echo9_argsStandardScheme();
            }
        }

        private static class echo9_argsStandardScheme extends StandardScheme<echo9_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo9_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAM1
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.param1 = iprot.readByte();
                                struct.setParam1IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARAM2
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.param2 = iprot.readI32();
                                struct.setParam2IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PARAM3
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.param3 = iprot.readI64();
                                struct.setParam3IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PARAM4
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                                struct.param4 = iprot.readDouble();
                                struct.setParam4IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo9_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PARAM1_FIELD_DESC);
                oprot.writeByte(struct.param1);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PARAM2_FIELD_DESC);
                oprot.writeI32(struct.param2);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PARAM3_FIELD_DESC);
                oprot.writeI64(struct.param3);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PARAM4_FIELD_DESC);
                oprot.writeDouble(struct.param4);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo9_argsTupleSchemeFactory implements SchemeFactory {
            public echo9_argsTupleScheme getScheme() {
                return new echo9_argsTupleScheme();
            }
        }

        private static class echo9_argsTupleScheme extends TupleScheme<echo9_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo9_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetParam1()) {
                    optionals.set(0);
                }
                if (struct.isSetParam2()) {
                    optionals.set(1);
                }
                if (struct.isSetParam3()) {
                    optionals.set(2);
                }
                if (struct.isSetParam4()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetParam1()) {
                    oprot.writeByte(struct.param1);
                }
                if (struct.isSetParam2()) {
                    oprot.writeI32(struct.param2);
                }
                if (struct.isSetParam3()) {
                    oprot.writeI64(struct.param3);
                }
                if (struct.isSetParam4()) {
                    oprot.writeDouble(struct.param4);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo9_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.param1 = iprot.readByte();
                    struct.setParam1IsSet(true);
                }
                if (incoming.get(1)) {
                    struct.param2 = iprot.readI32();
                    struct.setParam2IsSet(true);
                }
                if (incoming.get(2)) {
                    struct.param3 = iprot.readI64();
                    struct.setParam3IsSet(true);
                }
                if (incoming.get(3)) {
                    struct.param4 = iprot.readDouble();
                    struct.setParam4IsSet(true);
                }
            }
        }

    }

    public static class echo9_result implements org.apache.thrift.TBase<echo9_result, echo9_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo9_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo9_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo9_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo9_resultTupleSchemeFactory());
        }

        public byte success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo9_result.class, metaDataMap);
        }

        public echo9_result() {
        }

        public echo9_result(
                byte success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo9_result(echo9_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public echo9_result deepCopy() {
            return new echo9_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public byte getSuccess() {
            return this.success;
        }

        public echo9_result setSuccess(byte success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Byte)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Byte.valueOf(getSuccess());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo9_result)
                return this.equals((echo9_result)that);
            return false;
        }

        public boolean equals(echo9_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo9_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo9_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo9_resultStandardSchemeFactory implements SchemeFactory {
            public echo9_resultStandardScheme getScheme() {
                return new echo9_resultStandardScheme();
            }
        }

        private static class echo9_resultStandardScheme extends StandardScheme<echo9_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo9_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.success = iprot.readByte();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo9_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeByte(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo9_resultTupleSchemeFactory implements SchemeFactory {
            public echo9_resultTupleScheme getScheme() {
                return new echo9_resultTupleScheme();
            }
        }

        private static class echo9_resultTupleScheme extends TupleScheme<echo9_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo9_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeByte(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo9_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readByte();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class echo10_args implements org.apache.thrift.TBase<echo10_args, echo10_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo10_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo10_args");

        private static final org.apache.thrift.protocol.TField PARAM1_FIELD_DESC = new org.apache.thrift.protocol.TField("param1", org.apache.thrift.protocol.TType.LIST, (short)1);
        private static final org.apache.thrift.protocol.TField PARAM2_FIELD_DESC = new org.apache.thrift.protocol.TField("param2", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField PARAM3_FIELD_DESC = new org.apache.thrift.protocol.TField("param3", org.apache.thrift.protocol.TType.SET, (short)3);
        private static final org.apache.thrift.protocol.TField PARAM4_FIELD_DESC = new org.apache.thrift.protocol.TField("param4", org.apache.thrift.protocol.TType.SET, (short)4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo10_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo10_argsTupleSchemeFactory());
        }

        public List<Long> param1; // required
        public List<Short> param2; // required
        public Set<Byte> param3; // required
        public Set<MessageType> param4; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAM1((short)1, "param1"),
            PARAM2((short)2, "param2"),
            PARAM3((short)3, "param3"),
            PARAM4((short)4, "param4");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAM1
                        return PARAM1;
                    case 2: // PARAM2
                        return PARAM2;
                    case 3: // PARAM3
                        return PARAM3;
                    case 4: // PARAM4
                        return PARAM4;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAM1, new org.apache.thrift.meta_data.FieldMetaData("param1", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
            tmpMap.put(_Fields.PARAM2, new org.apache.thrift.meta_data.FieldMetaData("param2", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
            tmpMap.put(_Fields.PARAM3, new org.apache.thrift.meta_data.FieldMetaData("param3", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
            tmpMap.put(_Fields.PARAM4, new org.apache.thrift.meta_data.FieldMetaData("param4", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo10_args.class, metaDataMap);
        }

        public echo10_args() {
        }

        public echo10_args(
                List<Long> param1,
                List<Short> param2,
                Set<Byte> param3,
                Set<MessageType> param4)
        {
            this();
            this.param1 = param1;
            this.param2 = param2;
            this.param3 = param3;
            this.param4 = param4;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo10_args(echo10_args other) {
            if (other.isSetParam1()) {
                List<Long> __this__param1 = new ArrayList<Long>(other.param1);
                this.param1 = __this__param1;
            }
            if (other.isSetParam2()) {
                List<Short> __this__param2 = new ArrayList<Short>(other.param2);
                this.param2 = __this__param2;
            }
            if (other.isSetParam3()) {
                Set<Byte> __this__param3 = new HashSet<Byte>(other.param3);
                this.param3 = __this__param3;
            }
            if (other.isSetParam4()) {
                Set<MessageType> __this__param4 = new HashSet<MessageType>(other.param4.size());
                for (MessageType other_element : other.param4) {
                    __this__param4.add(other_element);
                }
                this.param4 = __this__param4;
            }
        }

        public echo10_args deepCopy() {
            return new echo10_args(this);
        }

        @Override
        public void clear() {
            this.param1 = null;
            this.param2 = null;
            this.param3 = null;
            this.param4 = null;
        }

        public int getParam1Size() {
            return (this.param1 == null) ? 0 : this.param1.size();
        }

        public java.util.Iterator<Long> getParam1Iterator() {
            return (this.param1 == null) ? null : this.param1.iterator();
        }

        public void addToParam1(long elem) {
            if (this.param1 == null) {
                this.param1 = new ArrayList<Long>();
            }
            this.param1.add(elem);
        }

        public List<Long> getParam1() {
            return this.param1;
        }

        public echo10_args setParam1(List<Long> param1) {
            this.param1 = param1;
            return this;
        }

        public void unsetParam1() {
            this.param1 = null;
        }

        /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
        public boolean isSetParam1() {
            return this.param1 != null;
        }

        public void setParam1IsSet(boolean value) {
            if (!value) {
                this.param1 = null;
            }
        }

        public int getParam2Size() {
            return (this.param2 == null) ? 0 : this.param2.size();
        }

        public java.util.Iterator<Short> getParam2Iterator() {
            return (this.param2 == null) ? null : this.param2.iterator();
        }

        public void addToParam2(short elem) {
            if (this.param2 == null) {
                this.param2 = new ArrayList<Short>();
            }
            this.param2.add(elem);
        }

        public List<Short> getParam2() {
            return this.param2;
        }

        public echo10_args setParam2(List<Short> param2) {
            this.param2 = param2;
            return this;
        }

        public void unsetParam2() {
            this.param2 = null;
        }

        /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
        public boolean isSetParam2() {
            return this.param2 != null;
        }

        public void setParam2IsSet(boolean value) {
            if (!value) {
                this.param2 = null;
            }
        }

        public int getParam3Size() {
            return (this.param3 == null) ? 0 : this.param3.size();
        }

        public java.util.Iterator<Byte> getParam3Iterator() {
            return (this.param3 == null) ? null : this.param3.iterator();
        }

        public void addToParam3(byte elem) {
            if (this.param3 == null) {
                this.param3 = new HashSet<Byte>();
            }
            this.param3.add(elem);
        }

        public Set<Byte> getParam3() {
            return this.param3;
        }

        public echo10_args setParam3(Set<Byte> param3) {
            this.param3 = param3;
            return this;
        }

        public void unsetParam3() {
            this.param3 = null;
        }

        /** Returns true if field param3 is set (has been assigned a value) and false otherwise */
        public boolean isSetParam3() {
            return this.param3 != null;
        }

        public void setParam3IsSet(boolean value) {
            if (!value) {
                this.param3 = null;
            }
        }

        public int getParam4Size() {
            return (this.param4 == null) ? 0 : this.param4.size();
        }

        public java.util.Iterator<MessageType> getParam4Iterator() {
            return (this.param4 == null) ? null : this.param4.iterator();
        }

        public void addToParam4(MessageType elem) {
            if (this.param4 == null) {
                this.param4 = new HashSet<MessageType>();
            }
            this.param4.add(elem);
        }

        public Set<MessageType> getParam4() {
            return this.param4;
        }

        public echo10_args setParam4(Set<MessageType> param4) {
            this.param4 = param4;
            return this;
        }

        public void unsetParam4() {
            this.param4 = null;
        }

        /** Returns true if field param4 is set (has been assigned a value) and false otherwise */
        public boolean isSetParam4() {
            return this.param4 != null;
        }

        public void setParam4IsSet(boolean value) {
            if (!value) {
                this.param4 = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PARAM1:
                    if (value == null) {
                        unsetParam1();
                    } else {
                        setParam1((List<Long>)value);
                    }
                    break;

                case PARAM2:
                    if (value == null) {
                        unsetParam2();
                    } else {
                        setParam2((List<Short>)value);
                    }
                    break;

                case PARAM3:
                    if (value == null) {
                        unsetParam3();
                    } else {
                        setParam3((Set<Byte>)value);
                    }
                    break;

                case PARAM4:
                    if (value == null) {
                        unsetParam4();
                    } else {
                        setParam4((Set<MessageType>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAM1:
                    return getParam1();

                case PARAM2:
                    return getParam2();

                case PARAM3:
                    return getParam3();

                case PARAM4:
                    return getParam4();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PARAM1:
                    return isSetParam1();
                case PARAM2:
                    return isSetParam2();
                case PARAM3:
                    return isSetParam3();
                case PARAM4:
                    return isSetParam4();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo10_args)
                return this.equals((echo10_args)that);
            return false;
        }

        public boolean equals(echo10_args that) {
            if (that == null)
                return false;

            boolean this_present_param1 = true && this.isSetParam1();
            boolean that_present_param1 = true && that.isSetParam1();
            if (this_present_param1 || that_present_param1) {
                if (!(this_present_param1 && that_present_param1))
                    return false;
                if (!this.param1.equals(that.param1))
                    return false;
            }

            boolean this_present_param2 = true && this.isSetParam2();
            boolean that_present_param2 = true && that.isSetParam2();
            if (this_present_param2 || that_present_param2) {
                if (!(this_present_param2 && that_present_param2))
                    return false;
                if (!this.param2.equals(that.param2))
                    return false;
            }

            boolean this_present_param3 = true && this.isSetParam3();
            boolean that_present_param3 = true && that.isSetParam3();
            if (this_present_param3 || that_present_param3) {
                if (!(this_present_param3 && that_present_param3))
                    return false;
                if (!this.param3.equals(that.param3))
                    return false;
            }

            boolean this_present_param4 = true && this.isSetParam4();
            boolean that_present_param4 = true && that.isSetParam4();
            if (this_present_param4 || that_present_param4) {
                if (!(this_present_param4 && that_present_param4))
                    return false;
                if (!this.param4.equals(that.param4))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_param1 = true && (isSetParam1());
            list.add(present_param1);
            if (present_param1)
                list.add(param1);

            boolean present_param2 = true && (isSetParam2());
            list.add(present_param2);
            if (present_param2)
                list.add(param2);

            boolean present_param3 = true && (isSetParam3());
            list.add(present_param3);
            if (present_param3)
                list.add(param3);

            boolean present_param4 = true && (isSetParam4());
            list.add(present_param4);
            if (present_param4)
                list.add(param4);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo10_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetParam1()).compareTo(other.isSetParam1());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam1()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param1, other.param1);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetParam2()).compareTo(other.isSetParam2());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam2()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param2, other.param2);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetParam3()).compareTo(other.isSetParam3());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam3()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param3, other.param3);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetParam4()).compareTo(other.isSetParam4());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParam4()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param4, other.param4);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo10_args(");
            boolean first = true;

            sb.append("param1:");
            if (this.param1 == null) {
                sb.append("null");
            } else {
                sb.append(this.param1);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("param2:");
            if (this.param2 == null) {
                sb.append("null");
            } else {
                sb.append(this.param2);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("param3:");
            if (this.param3 == null) {
                sb.append("null");
            } else {
                sb.append(this.param3);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("param4:");
            if (this.param4 == null) {
                sb.append("null");
            } else {
                sb.append(this.param4);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo10_argsStandardSchemeFactory implements SchemeFactory {
            public echo10_argsStandardScheme getScheme() {
                return new echo10_argsStandardScheme();
            }
        }

        private static class echo10_argsStandardScheme extends StandardScheme<echo10_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo10_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAM1
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                                    struct.param1 = new ArrayList<Long>(_list44.size);
                                    long _elem45;
                                    for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                                    {
                                        _elem45 = iprot.readI64();
                                        struct.param1.add(_elem45);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setParam1IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARAM2
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                                    struct.param2 = new ArrayList<Short>(_list47.size);
                                    short _elem48;
                                    for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                                    {
                                        _elem48 = iprot.readI16();
                                        struct.param2.add(_elem48);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setParam2IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PARAM3
                            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                                {
                                    org.apache.thrift.protocol.TSet _set50 = iprot.readSetBegin();
                                    struct.param3 = new HashSet<Byte>(2*_set50.size);
                                    byte _elem51;
                                    for (int _i52 = 0; _i52 < _set50.size; ++_i52)
                                    {
                                        _elem51 = iprot.readByte();
                                        struct.param3.add(_elem51);
                                    }
                                    iprot.readSetEnd();
                                }
                                struct.setParam3IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PARAM4
                            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                                {
                                    org.apache.thrift.protocol.TSet _set53 = iprot.readSetBegin();
                                    struct.param4 = new HashSet<MessageType>(2*_set53.size);
                                    MessageType _elem54;
                                    for (int _i55 = 0; _i55 < _set53.size; ++_i55)
                                    {
                                        _elem54 = MessageType.findByValue(iprot.readI32());
                                        struct.param4.add(_elem54);
                                    }
                                    iprot.readSetEnd();
                                }
                                struct.setParam4IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo10_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.param1 != null) {
                    oprot.writeFieldBegin(PARAM1_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.param1.size()));
                        for (long _iter56 : struct.param1)
                        {
                            oprot.writeI64(_iter56);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.param2 != null) {
                    oprot.writeFieldBegin(PARAM2_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.param2.size()));
                        for (short _iter57 : struct.param2)
                        {
                            oprot.writeI16(_iter57);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.param3 != null) {
                    oprot.writeFieldBegin(PARAM3_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, struct.param3.size()));
                        for (byte _iter58 : struct.param3)
                        {
                            oprot.writeByte(_iter58);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.param4 != null) {
                    oprot.writeFieldBegin(PARAM4_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.param4.size()));
                        for (MessageType _iter59 : struct.param4)
                        {
                            oprot.writeI32(_iter59.getValue());
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo10_argsTupleSchemeFactory implements SchemeFactory {
            public echo10_argsTupleScheme getScheme() {
                return new echo10_argsTupleScheme();
            }
        }

        private static class echo10_argsTupleScheme extends TupleScheme<echo10_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo10_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetParam1()) {
                    optionals.set(0);
                }
                if (struct.isSetParam2()) {
                    optionals.set(1);
                }
                if (struct.isSetParam3()) {
                    optionals.set(2);
                }
                if (struct.isSetParam4()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetParam1()) {
                    {
                        oprot.writeI32(struct.param1.size());
                        for (long _iter60 : struct.param1)
                        {
                            oprot.writeI64(_iter60);
                        }
                    }
                }
                if (struct.isSetParam2()) {
                    {
                        oprot.writeI32(struct.param2.size());
                        for (short _iter61 : struct.param2)
                        {
                            oprot.writeI16(_iter61);
                        }
                    }
                }
                if (struct.isSetParam3()) {
                    {
                        oprot.writeI32(struct.param3.size());
                        for (byte _iter62 : struct.param3)
                        {
                            oprot.writeByte(_iter62);
                        }
                    }
                }
                if (struct.isSetParam4()) {
                    {
                        oprot.writeI32(struct.param4.size());
                        for (MessageType _iter63 : struct.param4)
                        {
                            oprot.writeI32(_iter63.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo10_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list64 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                        struct.param1 = new ArrayList<Long>(_list64.size);
                        long _elem65;
                        for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                        {
                            _elem65 = iprot.readI64();
                            struct.param1.add(_elem65);
                        }
                    }
                    struct.setParam1IsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
                        struct.param2 = new ArrayList<Short>(_list67.size);
                        short _elem68;
                        for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                        {
                            _elem68 = iprot.readI16();
                            struct.param2.add(_elem68);
                        }
                    }
                    struct.setParam2IsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TSet _set70 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
                        struct.param3 = new HashSet<Byte>(2*_set70.size);
                        byte _elem71;
                        for (int _i72 = 0; _i72 < _set70.size; ++_i72)
                        {
                            _elem71 = iprot.readByte();
                            struct.param3.add(_elem71);
                        }
                    }
                    struct.setParam3IsSet(true);
                }
                if (incoming.get(3)) {
                    {
                        org.apache.thrift.protocol.TSet _set73 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.param4 = new HashSet<MessageType>(2*_set73.size);
                        MessageType _elem74;
                        for (int _i75 = 0; _i75 < _set73.size; ++_i75)
                        {
                            _elem74 = MessageType.findByValue(iprot.readI32());
                            struct.param4.add(_elem74);
                        }
                    }
                    struct.setParam4IsSet(true);
                }
            }
        }

    }

    public static class echo10_result implements org.apache.thrift.TBase<echo10_result, echo10_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo10_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo10_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new echo10_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new echo10_resultTupleSchemeFactory());
        }

        public String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo10_result.class, metaDataMap);
        }

        public echo10_result() {
        }

        public echo10_result(
                String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public echo10_result(echo10_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public echo10_result deepCopy() {
            return new echo10_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public echo10_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof echo10_result)
                return this.equals((echo10_result)that);
            return false;
        }

        public boolean equals(echo10_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(echo10_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("echo10_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class echo10_resultStandardSchemeFactory implements SchemeFactory {
            public echo10_resultStandardScheme getScheme() {
                return new echo10_resultStandardScheme();
            }
        }

        private static class echo10_resultStandardScheme extends StandardScheme<echo10_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, echo10_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, echo10_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class echo10_resultTupleSchemeFactory implements SchemeFactory {
            public echo10_resultTupleScheme getScheme() {
                return new echo10_resultTupleScheme();
            }
        }

        private static class echo10_resultTupleScheme extends TupleScheme<echo10_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, echo10_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, echo10_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}